{"is_source_file": true, "format": "Python", "description": "This file defines REST API routes for project management within a FastAPI application, including CRUD operations, technology associations, and time tracking features for projects within a multi-tenant setup.", "external_files": [".../database/connection.py", ".../database/models.py", ".../schemas/client.py", ".../schemas/time_tracking.py", ".../auth/dependencies.py"], "external_methods": ["get_db", "get_current_user", "get_tenant_filter", "ProjectStatus", "func.sum", "UUID", "uuid4"], "published": ["router"], "classes": [{"name": "APIRouter", "description": "FastAPI router for defining project-related API endpoints."}, {"name": "Project", "description": "Database model representing a project entity."}, {"name": "Client", "description": "Database model representing a client."}, {"name": "TimeEntry", "description": "Database model representing a time tracking entry."}, {"name": "Technology", "description": "Database model representing a technology."}, {"name": "ProjectTechnology", "description": "Association model between projects and technologies."}, {"name": "ProjectStatus", "description": "Enum representing the status of a project."}], "methods": [{"name": "create_project( request: ProjectCreateRequest, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Endpoint to create a new project within a tenant.", "scope": "", "scopeKind": ""}, {"name": "list_projects( client_id: Optional[UUID] = Query(None, description=\"Filter by client\"), active: Optional[bool] = Query(None, description=\"Filter by active status\"), status: Optional[str] = Query(None, description=\"Filter by project status\"), page: int = Query(1, ge=1, description=\"Page number\"), per_page: int = Query(10, ge=1, le=100, description=\"Items per page\"), current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Retrieve a paginated list of projects with optional filters.", "scope": "", "scopeKind": ""}, {"name": "get_project( project_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Retrieve detailed information for a specific project.", "scope": "", "scopeKind": ""}, {"name": "update_project( project_id: UUID, request: ProjectUpdateRequest, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Update details of a specific project.", "scope": "", "scopeKind": ""}, {"name": "get_project_technologies( project_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Get list of technologies assigned to a project.", "scope": "", "scopeKind": ""}, {"name": "assign_technology_to_project( project_id: UUID, technology_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Assign a technology to a project.", "scope": "", "scopeKind": ""}, {"name": "remove_technology_from_project( project_id: UUID, technology_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Remove a technology from a project.", "scope": "", "scopeKind": ""}], "calls": ["db.query", "db.add", "db.commit", "db.refresh", "db.delete", "func.sum", "ProjectStatus", "HTTPException", "status.HTTP_404_NOT_FOUND", "status.HTTP_409_CONFLICT", "status.HTTP_201_CREATED"], "search-terms": ["Projects API", "multi-tenant project routes", "project CRUD", "technology assignment", "project time tracking"], "state": 2, "file_id": 30, "knowledge_revision": 71, "git_revision": "", "ctags": [{"_type": "tag", "name": "assign_technology_to_project", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/projects.py", "pattern": "/^async def assign_technology_to_project($/", "language": "Python", "kind": "function", "signature": "( project_id: UUID, technology_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "create_project", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/projects.py", "pattern": "/^async def create_project($/", "language": "Python", "kind": "function", "signature": "( request: ProjectCreateRequest, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "get_project", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/projects.py", "pattern": "/^async def get_project($/", "language": "Python", "kind": "function", "signature": "( project_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "get_project_technologies", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/projects.py", "pattern": "/^async def get_project_technologies($/", "language": "Python", "kind": "function", "signature": "( project_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "list_projects", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/projects.py", "pattern": "/^async def list_projects($/", "language": "Python", "kind": "function", "signature": "( client_id: Optional[UUID] = Query(None, description=\"Filter by client\"), active: Optional[bool] = Query(None, description=\"Filter by active status\"), status: Optional[str] = Query(None, description=\"Filter by project status\"), page: int = Query(1, ge=1, description=\"Page number\"), per_page: int = Query(10, ge=1, le=100, description=\"Items per page\"), current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "remove_technology_from_project", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/projects.py", "pattern": "/^async def remove_technology_from_project($/", "language": "Python", "kind": "function", "signature": "( project_id: UUID, technology_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/projects.py", "pattern": "/^router = APIRouter(prefix=\"\\/projects\", tags=[\"Projects\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_project", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/projects.py", "pattern": "/^async def update_project($/", "language": "Python", "kind": "function", "signature": "( project_id: UUID, request: ProjectUpdateRequest, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}], "hash": "ba543c7700eb23257073468e44e7c742", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/api/routes/projects.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/projects\", tags=[\"Projects\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"71": ""}]}