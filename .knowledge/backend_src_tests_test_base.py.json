{"is_source_file": true, "format": "Python", "description": "This file provides base classes, utilities, and mock testing patterns for backend API testing and CRUD operations, specifically tailored for a FastAPI-based application. It includes classes for common response assertions, CRUD operation tests, tenant isolation testing, database utilities, and test data factories.", "external_files": ["typing", "unittest.mock", "fastapi.status"], "external_methods": ["status.HTTP_200_OK", "status.HTTP_201_CREATED", "status.HTTP_204_NO_CONTENT", "status.HTTP_404_NOT_FOUND", "status.HTTP_422_UNPROCESSABLE_ENTITY", "status.HTTP_401_UNAUTHORIZED", "status.HTTP_403_FORBIDDEN", "status.HTTP_409_CONFLICT"], "published": ["BaseAPITest", "BaseCRUDTest", "TenantIsolationTestMixin", "DatabaseTestUtilities", "TestDataFactory"], "classes": [{"name": "BaseAPITest", "description": "Provides common assertion methods for API response validation."}, {"name": "BaseCRUDTest", "description": "Provides standardized test methods for CRUD operations in API testing."}, {"name": "TenantIsolationTestMixin", "description": "Contains tests ensuring multi-tenancy data isolation and access control."}, {"name": "DatabaseTestUtilities", "description": "Offers static methods to create and clean database test data such as tenants, users, and clients."}, {"name": "TestDataFactory", "description": "Provides factory methods to generate default test data objects for tenants, users, clients, projects, and time entries."}], "methods": [{"name": "assert_success_response(self, response: Mock, expected_status: int = status.HTTP_200_OK)", "description": "Asserts that the response indicates a successful operation (status code 200 or 201).", "scope": "BaseAPITest", "scopeKind": "class"}, {"name": "assert_error_response(self, response: Mock, expected_status: int, expected_error: Optional[str] = None)", "description": "Checks if the response indicates an error with the expected status code and optional message.", "scope": "BaseAPITest", "scopeKind": "class"}, {"name": "assert_validation_error(self, response: Mock, field_name: Optional[str] = None)", "description": "Validates that the response corresponds to a validation error, optionally checking specific fields.", "scope": "BaseAPITest", "scopeKind": "class"}, {"name": "assert_unauthorized(self, response: Mock)", "description": "Verifies that the response indicates an unauthorized access attempt (status 401).", "scope": "BaseAPITest", "scopeKind": "class"}, {"name": "assert_forbidden(self, response: Mock)", "description": "Verifies that the response indicates forbidden access (status 403).", "scope": "BaseAPITest", "scopeKind": "class"}, {"name": "assert_not_found(self, response: Mock)", "description": "Checks if the response indicates resource not found (status 404).", "scope": "BaseAPITest", "scopeKind": "class"}, {"name": "assert_conflict(self, response: Mock)", "description": "Checks if the response indicates a conflict (status 409).", "scope": "BaseAPITest", "scopeKind": "class"}, {"name": "test_create_success(self, client: Mock, auth_headers: Dict[str, str], sample_data: Dict[str, Any])", "description": "Tests successful creation of a resource via POST.", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"name": "test_create_validation_error(self, client: Mock, auth_headers: Dict[str, str])", "description": "Tests creation failure due to validation errors.", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"name": "test_create_unauthorized(self, client: Mock, sample_data: Dict[str, Any])", "description": "Tests resource creation without authentication.", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"name": "test_read_success(self, client: Mock, auth_headers: Dict[str, str])", "description": "Tests successful retrieval of a resource via GET.", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"name": "test_read_not_found(self, client: Mock, auth_headers: Dict[str, str])", "description": "Tests retrieval of a non-existent resource.", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"name": "test_update_success(self, client: Mock, auth_headers: Dict[str, str])", "description": "Tests successful resource update via PUT.", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"name": "test_delete_success(self, client: Mock, auth_headers: Dict[str, str])", "description": "Verifies successful resource deletion.", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"name": "test_list_success(self, client: Mock, auth_headers: Dict[str, str])", "description": "Tests successful listing of resources.", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"name": "test_tenant_isolation_create(self, client: Mock, auth_headers: Dict[str, str], different_tenant_headers: Dict[str, str], sample_data: Dict[str, Any])", "description": "Ensures resources created in one tenant are not accessible in another.", "scope": "TenantIsolationTestMixin", "scopeKind": "class"}, {"name": "test_tenant_isolation_list(self, client: Mock, auth_headers: Dict[str, str], different_tenant_headers: Dict[str, str])", "description": "Verifies that resource listings show only tenant-specific items.", "scope": "TenantIsolationTestMixin", "scopeKind": "class"}, {"name": "Mock create_test_tenant(db_session: Mock, tenant_data: Dict[str, Any])", "description": "Creates a mock tenant object for testing.", "scope": "DatabaseTestUtilities", "scopeKind": "class"}, {"name": "Mock create_test_user(db_session: Mock, user_data: Dict[str, Any], tenant_id: str)", "description": "Creates a mock user object within a tenant.", "scope": "DatabaseTestUtilities", "scopeKind": "class"}, {"name": "Mock create_test_client(db_session: Mock, client_data: Dict[str, Any], tenant_id: str)", "description": "Creates a mock client object within a tenant.", "scope": "DatabaseTestUtilities", "scopeKind": "class"}, {"name": "cleanup_test_data(db_session: Mock)", "description": "Placeholder method for cleaning up test data in the database.", "scope": "DatabaseTestUtilities", "scopeKind": "class"}, {"name": "Dict[str,Any] create_tenant(**overrides)", "description": "Factory method to generate default tenant test data.", "scope": "TestDataFactory", "scopeKind": "class"}, {"name": "Dict[str,Any] create_user(**overrides)", "description": "Factory method to generate default user test data.", "scope": "TestDataFactory", "scopeKind": "class"}, {"name": "Dict[str,Any] create_client(**overrides)", "description": "Factory method to generate default client test data.", "scope": "TestDataFactory", "scopeKind": "class"}, {"name": "Dict[str,Any] create_project(**overrides)", "description": "Factory method to generate default project test data.", "scope": "TestDataFactory", "scopeKind": "class"}, {"name": "Dict[str,Any] create_time_entry(**overrides)", "description": "Factory method to generate default time entry test data.", "scope": "TestDataFactory", "scopeKind": "class"}, {"name": "mock_get(url, headers=None, **kwargs)", "scope": "TenantIsolationTestMixin.test_tenant_isolation_list", "scopeKind": "member", "description": "unavailable"}], "search-terms": ["BaseAPITest", "assert_success_response", "CRUD", "tenant", "multi-tenant", "database utilities", "test data factories", "FastAPI"], "state": 2, "file_id": 7, "knowledge_revision": 22, "git_revision": "", "revision_history": [{"15": ""}, {"22": ""}], "ctags": [{"_type": "tag", "name": "BaseAPITest", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^class BaseAPITest:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "BaseCRUDTest", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^class BaseCRUDTest(BaseAPITest):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "DatabaseTestUtilities", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^class DatabaseTestUtilities:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TenantIsolationTestMixin", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^class TenantIsolationTestMixin:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestDataFactory", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^class TestDataFactory:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "assert_conflict", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def assert_conflict(self, response: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, response: Mock)", "scope": "BaseAPITest", "scopeKind": "class"}, {"_type": "tag", "name": "assert_error_response", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def assert_error_response(self, response: Mock, expected_status: int, expected_error: Option/", "language": "Python", "kind": "member", "signature": "(self, response: Mock, expected_status: int, expected_error: Optional[str] = None)", "scope": "BaseAPITest", "scopeKind": "class"}, {"_type": "tag", "name": "assert_forbidden", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def assert_forbidden(self, response: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, response: Mock)", "scope": "BaseAPITest", "scopeKind": "class"}, {"_type": "tag", "name": "assert_not_found", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def assert_not_found(self, response: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, response: Mock)", "scope": "BaseAPITest", "scopeKind": "class"}, {"_type": "tag", "name": "assert_success_response", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def assert_success_response(self, response: Mock, expected_status: int = status.HTTP_200_OK)/", "language": "Python", "kind": "member", "signature": "(self, response: Mock, expected_status: int = status.HTTP_200_OK)", "scope": "BaseAPITest", "scopeKind": "class"}, {"_type": "tag", "name": "assert_unauthorized", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def assert_unauthorized(self, response: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, response: Mock)", "scope": "BaseAPITest", "scopeKind": "class"}, {"_type": "tag", "name": "assert_validation_error", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def assert_validation_error(self, response: Mock, field_name: Optional[str] = None):$/", "language": "Python", "kind": "member", "signature": "(self, response: Mock, field_name: Optional[str] = None)", "scope": "BaseAPITest", "scopeKind": "class"}, {"_type": "tag", "name": "base_url", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    base_url: str = \"\"  # Override in subclasses$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"_type": "tag", "name": "cleanup_test_data", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def cleanup_test_data(db_session: Mock):$/", "language": "Python", "kind": "member", "signature": "(db_session: Mock)", "scope": "DatabaseTestUtilities", "scopeKind": "class"}, {"_type": "tag", "name": "create_client", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def create_client(**overrides) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(**overrides)", "scope": "TestDataFactory", "scopeKind": "class"}, {"_type": "tag", "name": "create_project", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def create_project(**overrides) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(**overrides)", "scope": "TestDataFactory", "scopeKind": "class"}, {"_type": "tag", "name": "create_tenant", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def create_tenant(**overrides) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(**overrides)", "scope": "TestDataFactory", "scopeKind": "class"}, {"_type": "tag", "name": "create_test_client", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def create_test_client(db_session: Mock, client_data: Dict[str, Any], tenant_id: str) -> Moc/", "language": "Python", "typeref": "typename:Mock", "kind": "member", "signature": "(db_session: Mock, client_data: Dict[str, Any], tenant_id: str)", "scope": "DatabaseTestUtilities", "scopeKind": "class"}, {"_type": "tag", "name": "create_test_tenant", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def create_test_tenant(db_session: Mock, tenant_data: Dict[str, Any]) -> Mock:$/", "language": "Python", "typeref": "typename:Mock", "kind": "member", "signature": "(db_session: Mock, tenant_data: Dict[str, Any])", "scope": "DatabaseTestUtilities", "scopeKind": "class"}, {"_type": "tag", "name": "create_test_user", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def create_test_user(db_session: Mock, user_data: Dict[str, Any], tenant_id: str) -> Mock:$/", "language": "Python", "typeref": "typename:Mock", "kind": "member", "signature": "(db_session: Mock, user_data: Dict[str, Any], tenant_id: str)", "scope": "DatabaseTestUtilities", "scopeKind": "class"}, {"_type": "tag", "name": "create_time_entry", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def create_time_entry(**overrides) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(**overrides)", "scope": "TestDataFactory", "scopeKind": "class"}, {"_type": "tag", "name": "create_user", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def create_user(**overrides) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(**overrides)", "scope": "TestDataFactory", "scopeKind": "class"}, {"_type": "tag", "name": "mock_get", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^        def mock_get(url, headers=None, **kwargs):$/", "file": true, "language": "Python", "kind": "function", "signature": "(url, headers=None, **kwargs)", "scope": "TenantIsolationTestMixin.test_tenant_isolation_list", "scopeKind": "member"}, {"_type": "tag", "name": "test_create_success", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def test_create_success(self, client: Mock, auth_headers: Dict[str, str], sample_data: Dict[/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str], sample_data: Dict[str, Any])", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_create_unauthorized", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def test_create_unauthorized(self, client: Mock, sample_data: Dict[str, Any]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, sample_data: Dict[str, Any])", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_create_validation_error", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def test_create_validation_error(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_delete_success", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def test_delete_success(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_list_success", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def test_list_success(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_read_not_found", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def test_read_not_found(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_read_success", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def test_read_success(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "BaseCRUDTest", "scopeKind": "class"}, {"_type": "tag", "name": "test_tenant_isolation_create", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def test_tenant_isolation_create(self, client: Mock, auth_headers: Dict[str, str], $/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str], different_tenant_headers: Dict[str, str], sample_data: Dict[str, Any])", "scope": "TenantIsolationTestMixin", "scopeKind": "class"}, {"_type": "tag", "name": "test_tenant_isolation_list", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def test_tenant_isolation_list(self, client: Mock, auth_headers: Dict[str, str], $/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str], different_tenant_headers: Dict[str, str])", "scope": "TenantIsolationTestMixin", "scopeKind": "class"}, {"_type": "tag", "name": "test_update_success", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_base.py", "pattern": "/^    def test_update_success(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "BaseCRUDTest", "scopeKind": "class"}], "hash": "4b79ea4dc705bbed7536cb7f5b7ec13c", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/tests/test_base.py", "fields": [{"name": "str base_url", "scope": "BaseCRUDTest", "scopeKind": "class", "description": "unavailable"}]}