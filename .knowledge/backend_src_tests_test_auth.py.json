{"is_source_file": true, "format": "Python", "description": "This file contains unit tests for authentication and authorization functionalities in a FastAPI-based application, including user registration, login, password reset, token refresh, access control, tenant switching, and role-based permissions.", "external_files": ["from unittest.mock import Mock", "from fastapi import status", "from typing import Dict, Any", ".test_base import BaseAPITest"], "external_methods": ["self.assert_success_response", "self.assert_conflict", "self.assert_validation_error", "self.assert_unauthorized", "self.assert_error_response", "self.assert_forbidden", "self.assert_not_found"], "published": [], "classes": [{"name": "TestAuthentication", "description": "Contains test cases for user registration, login, password reset, token handling, and user info retrieval."}, {"name": "TestAuthorization", "description": "Contains test cases for access control, role permission checks, and token validation."}, {"name": "TestTenantSelection", "description": "Contains test cases for tenant switching and access to tenant-specific resources."}], "methods": [{"name": "test_user_registration_success(self, client: Mock, sample_user_data: Dict[str, Any], sample_tenant_data: Dict[str, Any])", "description": "Tests successful user registration flow and response structure.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_user_registration_duplicate_email(self, client: Mock, sample_user_data: Dict[str, Any])", "description": "Tests registration failure when email already exists.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_user_registration_invalid_email(self, client: Mock)", "description": "Tests registration failure with invalid email format.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_user_registration_weak_password(self, client: Mock)", "description": "Tests registration failure with weak password.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_user_login_success(self, client: Mock, sample_user_data: Dict[str, Any])", "description": "Tests successful login and retrieval of access token and user info.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_user_login_invalid_credentials(self, client: Mock)", "description": "Tests login failure with incorrect password.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_user_login_nonexistent_user(self, client: Mock)", "description": "Tests login failure when user does not exist.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_password_reset_request(self, client: Mock)", "description": "Tests password reset request endpoint.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_password_reset_confirm(self, client: Mock)", "description": "Tests successful password reset confirmation.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_password_reset_invalid_token(self, client: Mock)", "description": "Tests failure of password reset with invalid token.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_logout_success(self, client: Mock, auth_headers: Dict[str, str])", "description": "Tests logout process.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_token_refresh(self, client: Mock, auth_headers: Dict[str, str])", "description": "Tests refreshing JWT token.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_get_current_user(self, client: Mock, auth_headers: Dict[str, str])", "description": "Retrieves current user info based on token.", "scope": "TestAuthentication", "scopeKind": "class"}, {"name": "test_access_with_valid_token(self, client: Mock, auth_headers: Dict[str, str])", "description": "Checks access to protected endpoint with valid token.", "scope": "TestAuthorization", "scopeKind": "class"}, {"name": "test_access_without_token(self, client: Mock)", "description": "Ensures unauthorized error when no token provided.", "scope": "TestAuthorization", "scopeKind": "class"}, {"name": "test_access_with_expired_token(self, client: Mock, auth_mocker)", "description": "Checks handling of expired tokens.", "scope": "TestAuthorization", "scopeKind": "class"}, {"name": "test_access_with_invalid_token(self, client: Mock, auth_mocker)", "description": "Checks handling of invalid tokens.", "scope": "TestAuthorization", "scopeKind": "class"}, {"name": "test_admin_only_endpoint_with_admin_role(self, client: Mock, admin_auth_headers: Dict[str, str])", "description": "Verifies admin-only endpoint access with admin role.", "scope": "TestAuthorization", "scopeKind": "class"}, {"name": "test_admin_only_endpoint_with_user_role(self, client: Mock, auth_headers: Dict[str, str])", "description": "Verifies forbidden error for non-admin role.", "scope": "TestAuthorization", "scopeKind": "class"}, {"name": "test_tenant_access_control(self, client: Mock, auth_headers: Dict[str, str], different_tenant_headers: Dict[str, str])", "description": "Ensures users can access only resources in their tenant.", "scope": "TestAuthorization", "scopeKind": "class"}, {"name": "test_select_tenant_success(self, client: Mock, auth_headers: Dict[str, str])", "description": "Tests successful tenant switching.", "scope": "TestTenantSelection", "scopeKind": "class"}, {"name": "test_select_unauthorized_tenant(self, client: Mock, auth_headers: Dict[str, str])", "description": "Tests failure when switching to unauthorized tenant.", "scope": "TestTenantSelection", "scopeKind": "class"}, {"name": "test_select_nonexistent_tenant(self, client: Mock, auth_headers: Dict[str, str])", "description": "Tests failure when tenant does not exist.", "scope": "TestTenantSelection", "scopeKind": "class"}, {"name": "test_get_user_tenants(self, client: Mock, auth_headers: Dict[str, str])", "description": "Retrieves list of tenants accessible to the user.", "scope": "TestTenantSelection", "scopeKind": "class"}, {"name": "mock_get(url, headers=None, **kwargs)", "scope": "TestAuthorization.test_tenant_access_control", "scopeKind": "member", "description": "unavailable"}], "calls": ["client.post", "client.get"], "search-terms": ["authentication", "authorization", "JWT", "user registration", "password reset", "tenant switching", "role-based access", "token validation", "FastAPI", "unit testing"], "state": 2, "file_id": 8, "knowledge_revision": 21, "git_revision": "", "revision_history": [{"17": ""}, {"21": ""}], "ctags": [{"_type": "tag", "name": "TestAuthentication", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^class TestAuthentication(BaseAPITest):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestAuthorization", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^class TestAuthorization(BaseAPITest):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestTenantSelection", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^class TestTenantSelection(BaseAPITest):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "mock_get", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^        def mock_get(url, headers=None, **kwargs):$/", "file": true, "language": "Python", "kind": "function", "signature": "(url, headers=None, **kwargs)", "scope": "TestAuthorization.test_tenant_access_control", "scopeKind": "member"}, {"_type": "tag", "name": "test_access_with_expired_token", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_access_with_expired_token(self, client: Mock, auth_mocker):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_mocker)", "scope": "TestAuthorization", "scopeKind": "class"}, {"_type": "tag", "name": "test_access_with_invalid_token", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_access_with_invalid_token(self, client: Mock, auth_mocker):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_mocker)", "scope": "TestAuthorization", "scopeKind": "class"}, {"_type": "tag", "name": "test_access_with_valid_token", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_access_with_valid_token(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "TestAuthorization", "scopeKind": "class"}, {"_type": "tag", "name": "test_access_without_token", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_access_without_token(self, client: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock)", "scope": "TestAuthorization", "scopeKind": "class"}, {"_type": "tag", "name": "test_admin_only_endpoint_with_admin_role", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_admin_only_endpoint_with_admin_role(self, client: Mock, admin_auth_headers: Dict[st/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, admin_auth_headers: Dict[str, str])", "scope": "TestAuthorization", "scopeKind": "class"}, {"_type": "tag", "name": "test_admin_only_endpoint_with_user_role", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_admin_only_endpoint_with_user_role(self, client: Mock, auth_headers: Dict[str, str]/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "TestAuthorization", "scopeKind": "class"}, {"_type": "tag", "name": "test_get_current_user", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_get_current_user(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_get_user_tenants", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_get_user_tenants(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "TestTenantSelection", "scopeKind": "class"}, {"_type": "tag", "name": "test_logout_success", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_logout_success(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_password_reset_confirm", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_password_reset_confirm(self, client: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock)", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_password_reset_invalid_token", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_password_reset_invalid_token(self, client: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock)", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_password_reset_request", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_password_reset_request(self, client: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock)", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_select_nonexistent_tenant", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_select_nonexistent_tenant(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "TestTenantSelection", "scopeKind": "class"}, {"_type": "tag", "name": "test_select_tenant_success", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_select_tenant_success(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "TestTenantSelection", "scopeKind": "class"}, {"_type": "tag", "name": "test_select_unauthorized_tenant", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_select_unauthorized_tenant(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "TestTenantSelection", "scopeKind": "class"}, {"_type": "tag", "name": "test_tenant_access_control", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_tenant_access_control(self, client: Mock, auth_headers: Dict[str, str], $/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str], different_tenant_headers: Dict[str, str])", "scope": "TestAuthorization", "scopeKind": "class"}, {"_type": "tag", "name": "test_token_refresh", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_token_refresh(self, client: Mock, auth_headers: Dict[str, str]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, auth_headers: Dict[str, str])", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_user_login_invalid_credentials", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_user_login_invalid_credentials(self, client: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock)", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_user_login_nonexistent_user", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_user_login_nonexistent_user(self, client: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock)", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_user_login_success", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_user_login_success(self, client: Mock, sample_user_data: Dict[str, Any]):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, sample_user_data: Dict[str, Any])", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_user_registration_duplicate_email", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_user_registration_duplicate_email(self, client: Mock, sample_user_data: Dict[str, A/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, sample_user_data: Dict[str, Any])", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_user_registration_invalid_email", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_user_registration_invalid_email(self, client: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock)", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_user_registration_success", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_user_registration_success(self, client: Mock, sample_user_data: Dict[str, Any], $/", "language": "Python", "kind": "member", "signature": "(self, client: Mock, sample_user_data: Dict[str, Any], sample_tenant_data: Dict[str, Any])", "scope": "TestAuthentication", "scopeKind": "class"}, {"_type": "tag", "name": "test_user_registration_weak_password", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/tests/test_auth.py", "pattern": "/^    def test_user_registration_weak_password(self, client: Mock):$/", "language": "Python", "kind": "member", "signature": "(self, client: Mock)", "scope": "TestAuthentication", "scopeKind": "class"}], "hash": "eda8895f1be613c2045ac6ccb5e8a744", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/tests/test_auth.py"}