{"is_source_file": true, "format": "Python", "description": "This source file defines API routes for client management in a multi-tenant system using FastAPI. It includes endpoints for creating, listing, retrieving, updating, deactivating, deleting clients, and fetching related project and time summary data.", "external_files": [".../database/connection", ".../database/models", ".../schemas/client", ".../auth/dependencies"], "external_methods": ["get_db", "get_current_user", "get_tenant_filter"], "published": ["router"], "classes": [], "methods": [{"name": "create_client( request: ClientCreateRequest, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Creates a new client within the current tenant context after checking for duplicate names.", "scope": "", "scopeKind": ""}, {"name": "list_clients( active: Optional[bool] = Query(None, description=\"Filter by active status\"), has_projects: Optional[bool] = Query(None, description=\"Filter clients with/without projects\"), q: Optional[str] = Query(None, description=\"Search query for name or email\"), page: int = Query(1, ge=1, description=\"Page number\"), per_page: int = Query(10, ge=1, le=100, description=\"Items per page\"), current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Returns a filtered and paginated list of clients with their statistics.", "scope": "", "scopeKind": ""}, {"name": "get_client( client_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Retrieves detailed information about a specific client, including project count and time tracking stats.", "scope": "", "scopeKind": ""}, {"name": "update_client( client_id: UUID, request: ClientUpdateRequest, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Updates client information with new values and recalculates related stats.", "scope": "", "scopeKind": ""}, {"name": "deactivate_client( client_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Marks a client as inactive and records deactivation time.", "scope": "", "scopeKind": ""}, {"name": "delete_client( client_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Deletes a client if they have no associated projects; otherwise, raises an error.", "scope": "", "scopeKind": ""}, {"name": "get_client_projects( client_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Returns all projects associated with a specific client along with statistics.", "scope": "", "scopeKind": ""}, {"name": "get_client_time_summary( client_id: UUID, start_date: str = Query(..., description=\"Start date (YYYY-MM-DD)\"), end_date: str = Query(..., description=\"End date (YYYY-MM-DD)\"), current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Provides a time tracking summary for a client within a specified date range, including project breakdowns.", "scope": "", "scopeKind": ""}], "calls": ["db.query", "db.add", "db.commit", "db.refresh", "db.delete", "HTTPException", "func.count", "func.sum", "uuid4", "datetime.now", "datetime.fromisoformat"], "search-terms": ["client management", "multitenant API", "client CRUD", "client projects", "time-tracking summary", "project statistics", "deactivate client", "delete client with projects"], "state": 2, "file_id": 26, "knowledge_revision": 64, "git_revision": "", "revision_history": [{"56": ""}, {"64": ""}], "ctags": [{"_type": "tag", "name": "create_client", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/clients.py", "pattern": "/^async def create_client($/", "language": "Python", "kind": "function", "signature": "( request: ClientCreateRequest, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "deactivate_client", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/clients.py", "pattern": "/^async def deactivate_client($/", "language": "Python", "kind": "function", "signature": "( client_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "delete_client", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/clients.py", "pattern": "/^async def delete_client($/", "language": "Python", "kind": "function", "signature": "( client_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "get_client", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/clients.py", "pattern": "/^async def get_client($/", "language": "Python", "kind": "function", "signature": "( client_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "get_client_projects", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/clients.py", "pattern": "/^async def get_client_projects($/", "language": "Python", "kind": "function", "signature": "( client_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "get_client_time_summary", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/clients.py", "pattern": "/^async def get_client_time_summary($/", "language": "Python", "kind": "function", "signature": "( client_id: UUID, start_date: str = Query(..., description=\"Start date (YYYY-MM-DD)\"), end_date: str = Query(..., description=\"End date (YYYY-MM-DD)\"), current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "list_clients", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/clients.py", "pattern": "/^async def list_clients($/", "language": "Python", "kind": "function", "signature": "( active: Optional[bool] = Query(None, description=\"Filter by active status\"), has_projects: Optional[bool] = Query(None, description=\"Filter clients with/without projects\"), q: Optional[str] = Query(None, description=\"Search query for name or email\"), page: int = Query(1, ge=1, description=\"Page number\"), per_page: int = Query(10, ge=1, le=100, description=\"Items per page\"), current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/clients.py", "pattern": "/^router = APIRouter(prefix=\"\\/clients\", tags=[\"Clients\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_client", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/clients.py", "pattern": "/^async def update_client($/", "language": "Python", "kind": "function", "signature": "( client_id: UUID, request: ClientUpdateRequest, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}], "hash": "f42345ed801fdb55e5f8e532c6d87aa1", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/api/routes/clients.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/clients\", tags=[\"Clients\"])", "scope": "", "scopeKind": "", "description": "unavailable"}]}