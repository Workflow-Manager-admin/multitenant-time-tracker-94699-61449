{"is_source_file": true, "format": "Python", "description": "This file defines API routes for user management within a FastAPI application. It includes endpoints for creating, listing, retrieving, updating, and deactivating users, as well as managing user profiles, roles, passwords, and activity logs, all within a tenant-based multi-tenant architecture.", "external_files": ["...database/connection", "...database/models", "...schemas/user", "...schemas/auth", "...auth/dependencies", "...auth/jwt_handler"], "external_methods": ["get_current_user", "get_current_admin_user", "get_tenant_filter", "get_db", "PasswordHandler.hash_password", "PasswordHandler.verify_password", "PasswordHandler.validate_password_strength"], "published": ["create_user", "list_users", "get_own_profile", "update_own_profile", "get_user", "update_user", "update_user_role", "deactivate_user", "change_password", "get_user_activity"], "classes": [], "methods": [{"name": "create_user( request: UserCreateRequest, current_user: CurrentUser = Depends(get_current_admin_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Endpoint to create a new user within the current tenant, restricted to admin users.", "scope": "", "scopeKind": ""}, {"name": "list_users( active: Optional[bool] = Query(None, description=\"Filter by active status\"), role: Optional[str] = Query(None, description=\"Filter by role\"), q: Optional[str] = Query(None, description=\"Search query for name or email\"), page: int = Query(1, ge=1, description=\"Page number\"), per_page: int = Query(10, ge=1, le=100, description=\"Items per page\"), current_user: CurrentUser = Depends(get_current_admin_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Retrieve a paginated list of users with filtering options, admin only.", "scope": "", "scopeKind": ""}, {"name": "get_own_profile( current_user: CurrentUser = Depends(get_current_user), db: Session = Depends(get_db) )", "description": "Get profile information of the current authenticated user.", "scope": "", "scopeKind": ""}, {"name": "update_own_profile( request: UserUpdateRequest, current_user: CurrentUser = Depends(get_current_user), db: Session = Depends(get_db) )", "description": "Update profile information for the current user.", "scope": "", "scopeKind": ""}, {"name": "get_user( user_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Get detailed information about a specific user, accessible by the user themselves or admins.", "scope": "", "scopeKind": ""}, {"name": "update_user( user_id: UUID, request: UserUpdateRequest, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Update user information, with permission checks for user or admin.", "scope": "", "scopeKind": ""}, {"name": "update_user_role( user_id: UUID, role_data: dict, current_user: CurrentUser = Depends(get_current_admin_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Update the role of a user within the tenant, admin only.", "scope": "", "scopeKind": ""}, {"name": "deactivate_user( user_id: UUID, current_user: CurrentUser = Depends(get_current_admin_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )", "description": "Deactivate a user account, admin only.", "scope": "", "scopeKind": ""}, {"name": "change_password( request: ChangePasswordRequest, current_user: CurrentUser = Depends(get_current_user), db: Session = Depends(get_db) )", "description": "Change the current user's password, requires verification of current password.", "scope": "", "scopeKind": ""}, {"name": "get_user_activity( page: int = Query(1, ge=1, description=\"Page number\"), per_page: int = Query(10, ge=1, le=100, description=\"Items per page\"), current_user: CurrentUser = Depends(get_current_user), db: Session = Depends(get_db) )", "description": "Retrieve the activity log for the current user.", "scope": "", "scopeKind": ""}], "calls": ["db.query", "db.add", "db.commit", "db.refresh", "PasswordHandler.hash_password", "PasswordHandler.verify_password", "PasswordHandler.validate_password_strength"], "search-terms": ["FastAPI user routes", "Multi-tenant user management", "User CRUD operations", "User profile endpoints", "Role management", "Password change", "User activity log"], "state": 2, "file_id": 27, "knowledge_revision": 67, "git_revision": "", "revision_history": [{"58": ""}, {"67": ""}], "ctags": [{"_type": "tag", "name": "ActivitySchema", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^    from ...schemas.auth import UserActivityLog as ActivitySchema$/", "file": true, "language": "Python", "kind": "unknown", "scope": "get_user_activity", "scopeKind": "function", "nameref": "unknown:UserActivityLog"}, {"_type": "tag", "name": "change_password", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^async def change_password($/", "language": "Python", "kind": "function", "signature": "( request: ChangePasswordRequest, current_user: CurrentUser = Depends(get_current_user), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "create_user", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^async def create_user($/", "language": "Python", "kind": "function", "signature": "( request: UserCreateRequest, current_user: CurrentUser = Depends(get_current_admin_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "deactivate_user", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^async def deactivate_user($/", "language": "Python", "kind": "function", "signature": "( user_id: UUID, current_user: CurrentUser = Depends(get_current_admin_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "get_own_profile", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^async def get_own_profile($/", "language": "Python", "kind": "function", "signature": "( current_user: CurrentUser = Depends(get_current_user), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "get_user", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^async def get_user($/", "language": "Python", "kind": "function", "signature": "( user_id: UUID, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "get_user_activity", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^async def get_user_activity($/", "language": "Python", "kind": "function", "signature": "( page: int = Query(1, ge=1, description=\"Page number\"), per_page: int = Query(10, ge=1, le=100, description=\"Items per page\"), current_user: CurrentUser = Depends(get_current_user), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "list_users", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^async def list_users($/", "language": "Python", "kind": "function", "signature": "( active: Optional[bool] = Query(None, description=\"Filter by active status\"), role: Optional[str] = Query(None, description=\"Filter by role\"), q: Optional[str] = Query(None, description=\"Search query for name or email\"), page: int = Query(1, ge=1, description=\"Page number\"), per_page: int = Query(10, ge=1, le=100, description=\"Items per page\"), current_user: CurrentUser = Depends(get_current_admin_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^router = APIRouter(prefix=\"\\/users\", tags=[\"Users\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_own_profile", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^async def update_own_profile($/", "language": "Python", "kind": "function", "signature": "( request: UserUpdateRequest, current_user: CurrentUser = Depends(get_current_user), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "update_user", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^async def update_user($/", "language": "Python", "kind": "function", "signature": "( user_id: UUID, request: UserUpdateRequest, current_user: CurrentUser = Depends(get_current_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "update_user_role", "path": "/home/kavia/workspace/code-generation/multitenant-time-tracker-94699-61449/backend/src/api/routes/users.py", "pattern": "/^async def update_user_role($/", "language": "Python", "kind": "function", "signature": "( user_id: UUID, role_data: dict, current_user: CurrentUser = Depends(get_current_admin_user), tenant_filter: TenantFilter = Depends(get_tenant_filter), db: Session = Depends(get_db) )"}], "hash": "9945f92d2de1cb03a19a6d971daab24a", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/api/routes/users.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/users\", tags=[\"Users\"])", "scope": "", "scopeKind": "", "description": "unavailable"}]}